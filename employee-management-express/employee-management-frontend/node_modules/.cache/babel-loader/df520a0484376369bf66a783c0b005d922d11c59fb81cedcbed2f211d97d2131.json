{"ast":null,"code":"import axios from \"axios\";\nimport { GET_TASKS, GET_ERRORS, CREATE_TASK, GET_TASK, DELETE_TASK } from \"./types\";\nexport const getTasks = (dep_id, emp_id, id) => async dispatch => {\n  try {\n    let apiUrl = `http://localhost:8095/api/tasks/${dep_id}/${emp_id}`;\n    if (id) {\n      // If an 'id' is provided, add it to the URL to fetch data for a specific task\n      apiUrl += `/${id}`;\n    }\n    const res = await axios.get(apiUrl);\n    dispatch({\n      type: GET_TASKS,\n      payload: res.data\n    });\n  } catch (error) {\n    dispatch({\n      type: GET_ERRORS,\n      payload: error.response.data\n    });\n  }\n};\nexport const createTask = (task, dep_id, emp_id) => async dispatch => {\n  try {\n    const res = await axios.post(`http://localhost:8095/api/tasks/${dep_id}/${emp_id}`, task);\n\n    // Dispatch an action to handle the successful creation\n    dispatch({\n      type: CREATE_TASK,\n      // You should define this action type in your Redux actions\n      payload: res.data,\n      priority: parseInt(requestBody.priority) // You may update the payload based on your needs\n    });\n  } catch (error) {\n    dispatch({\n      type: GET_ERRORS,\n      payload: error.response.data\n    });\n  }\n};\nexport const getTask = (dep_id, emp_id, id) => async dispatch => {\n  try {\n    const res = await axios.get(`http://localhost:8095/api/tasks/${dep_id}/${emp_id}/${id}`);\n    dispatch({\n      type: GET_TASK,\n      payload: res.data\n    });\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: GET_ERRORS,\n      payload: error.response.data\n    });\n  }\n};\nexport const deleteTask = (dep_id, emp_id, id) => async dispatch => {\n  if (window.confirm(\"Are you sure you want to delete this Task?\")) {\n    await axios.delete(`http://localhost:8095/api/tasks/${dep_id}/${emp_id}/${id}`);\n    dispatch({\n      type: DELETE_TASK,\n      payload: id\n    });\n  }\n};\nexport const updateTask = (updatedTask, dep_id, emp_id, id) => async dispatch => {\n  try {\n    const res = await axios.put(`http://localhost:8095/api/tasks/${dep_id}/${emp_id}/${id}`, updatedTask);\n\n    // Dispatch an action to handle the successful update\n    dispatch({\n      type: GET_TASKS,\n      // Use the appropriate action type\n      payload: res.data // You may update the payload based on your needs\n    });\n  } catch (error) {\n    dispatch({\n      type: GET_ERRORS,\n      payload: error.response.data\n    });\n  }\n};","map":{"version":3,"names":["axios","GET_TASKS","GET_ERRORS","CREATE_TASK","GET_TASK","DELETE_TASK","getTasks","dep_id","emp_id","id","dispatch","apiUrl","res","get","type","payload","data","error","response","createTask","task","post","priority","parseInt","requestBody","getTask","console","log","deleteTask","window","confirm","delete","updateTask","updatedTask","put"],"sources":["C:/home/edilat/IDE/git-repositories/web-products/internship-web/live-sessions-internship-web/employee-management-frontend/src/actions/TaskActions.js"],"sourcesContent":["import axios from \"axios\";\r\nimport {\r\n  GET_TASKS,\r\n  GET_ERRORS,\r\n  CREATE_TASK,\r\n  GET_TASK,\r\n  DELETE_TASK,\r\n} from \"./types\";\r\n\r\nexport const getTasks = (dep_id, emp_id, id) => async (dispatch) => {\r\n  try {\r\n    let apiUrl = `http://localhost:8095/api/tasks/${dep_id}/${emp_id}`;\r\n    \r\n    if (id) {\r\n      // If an 'id' is provided, add it to the URL to fetch data for a specific task\r\n      apiUrl += `/${id}`;\r\n    }\r\n\r\n    const res = await axios.get(apiUrl);\r\n    dispatch({\r\n      type: GET_TASKS,\r\n      payload: res.data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload: error.response.data,\r\n    });\r\n  }\r\n};\r\n\r\n\r\nexport const createTask = (task, dep_id, emp_id) => async (dispatch) => {\r\n  try {\r\n    const res = await axios.post(\r\n      `http://localhost:8095/api/tasks/${dep_id}/${emp_id}`,\r\n      task\r\n    );\r\n\r\n    // Dispatch an action to handle the successful creation\r\n    dispatch({\r\n      type: CREATE_TASK, // You should define this action type in your Redux actions\r\n      payload: res.data,\r\n      priority: parseInt(requestBody.priority), // You may update the payload based on your needs\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload: error.response.data,\r\n    });\r\n  }\r\n};\r\n\r\n\r\nexport const getTask = (dep_id, emp_id, id) => async (dispatch) => {\r\n  try {\r\n    const res = await axios.get(`http://localhost:8095/api/tasks/${dep_id}/${emp_id}/${id}`);\r\n    dispatch({\r\n      type: GET_TASK,\r\n      payload: res.data,\r\n    });\r\n  } catch (error) {\r\n    console.log(error);\r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload: error.response.data,\r\n    });\r\n  }\r\n};\r\n\r\n\r\nexport const deleteTask = (dep_id, emp_id, id) => async (dispatch) => {\r\n  if (window.confirm(\"Are you sure you want to delete this Task?\")) {\r\n    await axios.delete(`http://localhost:8095/api/tasks/${dep_id}/${emp_id}/${id}`);\r\n    dispatch({\r\n      type: DELETE_TASK,\r\n      payload: id,\r\n    });\r\n  }\r\n};\r\n\r\n\r\nexport const updateTask = (updatedTask, dep_id, emp_id, id) => async (dispatch) => {\r\n  try {\r\n    const res = await axios.put(\r\n      `http://localhost:8095/api/tasks/${dep_id}/${emp_id}/${id}`,\r\n      updatedTask\r\n    );\r\n\r\n    // Dispatch an action to handle the successful update\r\n    dispatch({\r\n      type: GET_TASKS, // Use the appropriate action type\r\n      payload: res.data, // You may update the payload based on your needs\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload: error.response.data,\r\n    });\r\n  }\r\n};\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}