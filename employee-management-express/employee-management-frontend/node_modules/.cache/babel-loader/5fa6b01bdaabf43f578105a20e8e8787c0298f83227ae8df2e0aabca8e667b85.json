{"ast":null,"code":"import axios from \"axios\";\nimport { GET_EMPLOYEES, GET_EMPLOYEE, DELETE_EMPLOYEE, GET_ERRORS, CREATE_EMPLOYEE } from \"./types\";\n//create getEmployeeList function that uses Axios to make a GET request to a REST API endpoint at http://localhost:8095/api/employees/list/${id} where id is a parameter passed to the function\n//fetches a list of employees from a REST API and dispatches the result to the Redux store.\n// id = department id\nexport const getEmployeeList = id => async dispatch => {\n  const res = await axios.get(`http://localhost:8095/api/employees/list/${id}`);\n  dispatch({\n    type: GET_EMPLOYEES,\n    payload: res.data\n  });\n};\nexport const createEmployee = (employee, department) => async dispatch => {\n  try {\n    await axios.post(`http://localhost:8095/api/employees/${department}`, employee);\n    window.location.href = `/employees/${department}`;\n    dispatch({\n      type: CREATE_EMPLOYEE,\n      payload: {}\n    });\n  } catch (error) {\n    dispatch({\n      type: GET_ERRORS,\n      payload: error.response.data\n    });\n  }\n};\nexport const getEmployee = (dep_id, id) => async dispatch => {\n  try {\n    const res = await axios.get(`http://localhost:8095/api/employees/${dep_id}/${id}`);\n    dispatch({\n      type: GET_EMPLOYEE,\n      payload: res.data\n    });\n  } catch (error) {\n    window.location.href = \"/employee\";\n  }\n};\nexport const deleteEmployee = id => async dispatch => {\n  if (window.confirm(\"Are you sure you want to delete this employee?\")) {\n    await axios.delete(`http://localhost:8095/api/employees/delete/${id}`);\n    dispatch({\n      type: DELETE_EMPLOYEE,\n      payload: id\n    });\n  }\n};","map":{"version":3,"names":["axios","GET_EMPLOYEES","GET_EMPLOYEE","DELETE_EMPLOYEE","GET_ERRORS","CREATE_EMPLOYEE","getEmployeeList","id","dispatch","res","get","type","payload","data","createEmployee","employee","department","post","window","location","href","error","response","getEmployee","dep_id","deleteEmployee","confirm","delete"],"sources":["C:/home/edilat/IDE/git-repositories/web-products/internship-web/live-sessions-internship-web/employee-management-frontend/src/actions/EmployeeActions.js"],"sourcesContent":["import axios from \"axios\";\r\nimport {\r\n  GET_EMPLOYEES,\r\n  GET_EMPLOYEE,\r\n  DELETE_EMPLOYEE,\r\n  GET_ERRORS,\r\n  CREATE_EMPLOYEE,\r\n} from \"./types\";\r\n//create getEmployeeList function that uses Axios to make a GET request to a REST API endpoint at http://localhost:8095/api/employees/list/${id} where id is a parameter passed to the function\r\n//fetches a list of employees from a REST API and dispatches the result to the Redux store.\r\n// id = department id\r\nexport const getEmployeeList = (id) => async (dispatch) => {\r\n  const res = await axios.get(`http://localhost:8095/api/employees/list/${id}`);\r\n  dispatch({\r\n    type: GET_EMPLOYEES,\r\n    payload: res.data,\r\n  });\r\n};\r\nexport const createEmployee = (employee, department) => async (dispatch) => {\r\n  try {\r\n    await axios.post(\r\n      `http://localhost:8095/api/employees/${department}`,\r\n      employee\r\n    );\r\n    window.location.href = `/employees/${department}`;\r\n    dispatch({\r\n      type: CREATE_EMPLOYEE,\r\n      payload: {},\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload: error.response.data,\r\n    });\r\n  }\r\n};\r\nexport const getEmployee = (dep_id, id) => async (dispatch) => {\r\n  try {\r\n    const res = await axios.get(\r\n      `http://localhost:8095/api/employees/${dep_id}/${id}`\r\n    );\r\n    dispatch({\r\n      type: GET_EMPLOYEE,\r\n      payload: res.data,\r\n    });\r\n  } catch (error) {\r\n    window.location.href = \"/employee\";\r\n  }\r\n};\r\nexport const deleteEmployee = (id) => async (dispatch) => {\r\n  if (window.confirm(\"Are you sure you want to delete this employee?\")) {\r\n    await axios.delete(`http://localhost:8095/api/employees/delete/${id}`);\r\n    dispatch({\r\n      type: DELETE_EMPLOYEE,\r\n      payload: id,\r\n    });\r\n  }\r\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SACEC,aAAa,EACbC,YAAY,EACZC,eAAe,EACfC,UAAU,EACVC,eAAe,QACV,SAAS;AAChB;AACA;AACA;AACA,OAAO,MAAMC,eAAe,GAAIC,EAAE,IAAK,MAAOC,QAAQ,IAAK;EACzD,MAAMC,GAAG,GAAG,MAAMT,KAAK,CAACU,GAAG,CAAE,4CAA2CH,EAAG,EAAC,CAAC;EAC7EC,QAAQ,CAAC;IACPG,IAAI,EAAEV,aAAa;IACnBW,OAAO,EAAEH,GAAG,CAACI;EACf,CAAC,CAAC;AACJ,CAAC;AACD,OAAO,MAAMC,cAAc,GAAGA,CAACC,QAAQ,EAAEC,UAAU,KAAK,MAAOR,QAAQ,IAAK;EAC1E,IAAI;IACF,MAAMR,KAAK,CAACiB,IAAI,CACb,uCAAsCD,UAAW,EAAC,EACnDD,QACF,CAAC;IACDG,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAI,cAAaJ,UAAW,EAAC;IACjDR,QAAQ,CAAC;MACPG,IAAI,EAAEN,eAAe;MACrBO,OAAO,EAAE,CAAC;IACZ,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOS,KAAK,EAAE;IACdb,QAAQ,CAAC;MACPG,IAAI,EAAEP,UAAU;MAChBQ,OAAO,EAAES,KAAK,CAACC,QAAQ,CAACT;IAC1B,CAAC,CAAC;EACJ;AACF,CAAC;AACD,OAAO,MAAMU,WAAW,GAAGA,CAACC,MAAM,EAAEjB,EAAE,KAAK,MAAOC,QAAQ,IAAK;EAC7D,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMT,KAAK,CAACU,GAAG,CACxB,uCAAsCc,MAAO,IAAGjB,EAAG,EACtD,CAAC;IACDC,QAAQ,CAAC;MACPG,IAAI,EAAET,YAAY;MAClBU,OAAO,EAAEH,GAAG,CAACI;IACf,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOQ,KAAK,EAAE;IACdH,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,WAAW;EACpC;AACF,CAAC;AACD,OAAO,MAAMK,cAAc,GAAIlB,EAAE,IAAK,MAAOC,QAAQ,IAAK;EACxD,IAAIU,MAAM,CAACQ,OAAO,CAAC,gDAAgD,CAAC,EAAE;IACpE,MAAM1B,KAAK,CAAC2B,MAAM,CAAE,8CAA6CpB,EAAG,EAAC,CAAC;IACtEC,QAAQ,CAAC;MACPG,IAAI,EAAER,eAAe;MACrBS,OAAO,EAAEL;IACX,CAAC,CAAC;EACJ;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}