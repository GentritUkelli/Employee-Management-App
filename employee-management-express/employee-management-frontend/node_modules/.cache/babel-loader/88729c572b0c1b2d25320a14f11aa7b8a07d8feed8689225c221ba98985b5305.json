{"ast":null,"code":"import axios from \"axios\";\nimport { GET_TASKS, GET_ERRORS, CREATE_TASK, GET_TASK, DELETE_TASK } from \"./types\";\nexport const getTasks = (dep_id, emp_id, task_id) => async dispatch => {\n  try {\n    const res = await axios.get(`http://localhost:8095/api/tasks/${dep_id}/${emp_id}/${task_id}`);\n    dispatch({\n      type: GET_TASKS,\n      payload: res.data\n    });\n  } catch (error) {\n    dispatch({\n      type: GET_ERRORS,\n      payload: error.response.data\n    });\n  }\n};\nexport const createTask = (task, dep_id, emp_id) => async dispatch => {\n  try {\n    const res = await axios.post(`http://localhost:8095/api/tasks/${dep_id}/${emp_id}`, task);\n\n    // Dispatch an action to handle the successful creation\n    dispatch({\n      type: CREATE_TASK,\n      // You should define this action type in your Redux actions\n      payload: res.data // You may update the payload based on your needs\n    });\n  } catch (error) {\n    dispatch({\n      type: GET_ERRORS,\n      payload: error.response.data\n    });\n  }\n};\nexport const getTask = (dep_id, emp_id, id) => async dispatch => {\n  try {\n    const res = await axios.get(`http://localhost:8095/api/tasks/${dep_id}/${emp_id}/${id}`);\n    dispatch({\n      type: GET_TASK,\n      payload: res.data\n    });\n  } catch (error) {\n    console.log(error);\n    dispatch({\n      type: GET_ERRORS,\n      payload: error.response.data\n    });\n  }\n};\nexport const deleteTask = (dep_id, emp_id, id) => async dispatch => {\n  if (window.confirm(\"Are you sure you want to delete this Task?\")) {\n    await axios.delete(`http://localhost:8095/api/tasks/${dep_id}/${emp_id}/${id}`);\n    dispatch({\n      type: DELETE_TASK,\n      payload: id\n    });\n  }\n};\nexport const updateTask = (updatedTask, dep_id, emp_id, id) => async dispatch => {\n  try {\n    const res = await axios.put(`http://localhost:8095/api/tasks/${dep_id}/${emp_id}/${id}`, updatedTask);\n\n    // Dispatch an action to handle the successful update\n    dispatch({\n      type: GET_TASKS,\n      // Use the appropriate action type\n      payload: res.data // You may update the payload based on your needs\n    });\n  } catch (error) {\n    dispatch({\n      type: GET_ERRORS,\n      payload: error.response.data\n    });\n  }\n};","map":{"version":3,"names":["axios","GET_TASKS","GET_ERRORS","CREATE_TASK","GET_TASK","DELETE_TASK","getTasks","dep_id","emp_id","task_id","dispatch","res","get","type","payload","data","error","response","createTask","task","post","getTask","id","console","log","deleteTask","window","confirm","delete","updateTask","updatedTask","put"],"sources":["C:/home/edilat/IDE/git-repositories/web-products/internship-web/live-sessions-internship-web/employee-management-frontend/src/actions/TaskActions.js"],"sourcesContent":["import axios from \"axios\";\r\nimport {\r\n  GET_TASKS,\r\n  GET_ERRORS,\r\n  CREATE_TASK,\r\n  GET_TASK,\r\n  DELETE_TASK,\r\n} from \"./types\";\r\n\r\nexport const getTasks = (dep_id, emp_id, task_id) => async (dispatch) => {\r\n  try {\r\n    const res = await axios.get(\r\n      `http://localhost:8095/api/tasks/${dep_id}/${emp_id}/${task_id}`\r\n    );\r\n    dispatch({\r\n      type: GET_TASKS,\r\n      payload: res.data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload: error.response.data,\r\n    });\r\n  }\r\n};\r\n\r\nexport const createTask = (task, dep_id, emp_id) => async (dispatch) => {\r\n  try {\r\n    const res = await axios.post(\r\n      `http://localhost:8095/api/tasks/${dep_id}/${emp_id}`,\r\n      task\r\n    );\r\n\r\n    // Dispatch an action to handle the successful creation\r\n    dispatch({\r\n      type: CREATE_TASK, // You should define this action type in your Redux actions\r\n      payload: res.data, // You may update the payload based on your needs\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload: error.response.data,\r\n    });\r\n  }\r\n};\r\n\r\n\r\nexport const getTask = (dep_id, emp_id, id) => async (dispatch) => {\r\n  try {\r\n    const res = await axios.get(`http://localhost:8095/api/tasks/${dep_id}/${emp_id}/${id}`);\r\n    dispatch({\r\n      type: GET_TASK,\r\n      payload: res.data,\r\n    });\r\n  } catch (error) {\r\n    console.log(error);\r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload: error.response.data,\r\n    });\r\n  }\r\n};\r\n\r\n\r\nexport const deleteTask = (dep_id, emp_id, id) => async (dispatch) => {\r\n  if (window.confirm(\"Are you sure you want to delete this Task?\")) {\r\n    await axios.delete(`http://localhost:8095/api/tasks/${dep_id}/${emp_id}/${id}`);\r\n    dispatch({\r\n      type: DELETE_TASK,\r\n      payload: id,\r\n    });\r\n  }\r\n};\r\n\r\n\r\nexport const updateTask = (updatedTask, dep_id, emp_id, id) => async (dispatch) => {\r\n  try {\r\n    const res = await axios.put(\r\n      `http://localhost:8095/api/tasks/${dep_id}/${emp_id}/${id}`,\r\n      updatedTask\r\n    );\r\n\r\n    // Dispatch an action to handle the successful update\r\n    dispatch({\r\n      type: GET_TASKS, // Use the appropriate action type\r\n      payload: res.data, // You may update the payload based on your needs\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload: error.response.data,\r\n    });\r\n  }\r\n};\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}