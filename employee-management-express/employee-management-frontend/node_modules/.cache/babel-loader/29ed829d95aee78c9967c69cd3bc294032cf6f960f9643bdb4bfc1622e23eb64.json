{"ast":null,"code":"import axios from \"axios\";\nimport { GET_TASKS, CREATE_TASK, GET_TASK, DELETE_TASK, UPDATE_TASK } from \"./types\";\nexport const getTasks = (dep_id, emp_id, id) => async dispatch => {\n  const apiUrl = `http://localhost:8095/api/tasks/${dep_id}/${emp_id}`;\n  if (id) {\n    apiUrl += `/${id}`;\n  }\n  const res = await axios.get(apiUrl);\n  dispatch({\n    type: GET_TASKS,\n    payload: res.data\n  });\n};\nexport const createTask = (task, dep_id, emp_id) => async dispatch => {\n  const res = await axios.post(`http://localhost:8095/api/tasks/${dep_id}/${emp_id}`, task);\n  dispatch({\n    type: CREATE_TASK,\n    payload: res.data\n  });\n};\nexport const getTask = (dep_id, emp_id, id) => async dispatch => {\n  const res = await axios.get(`http://localhost:8095/api/tasks/${dep_id}/${emp_id}/${id}`);\n  dispatch({\n    type: GET_TASK,\n    payload: res.data\n  });\n};\nexport const deleteTask = (dep_id, emp_id, id) => async dispatch => {\n  if (window.confirm(\"Are you sure you want to delete this Task?\")) {\n    await axios.delete(`http://localhost:8095/api/tasks/${dep_id}/${emp_id}/${id}`);\n    dispatch({\n      type: DELETE_TASK,\n      payload: id\n    });\n  }\n};\nexport const updateTask = (updatedTask, dep_id, emp_id, id) => async dispatch => {\n  try {\n    const res = await axios.put(`http://localhost:8095/api/tasks/${dep_id}/${emp_id}/${id}`, updatedTask, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n\n    // Dispatch an action to handle the successful update\n    dispatch({\n      type: UPDATE_TASK,\n      // Define the action type here\n      payload: res.data // You may update the payload based on your needs\n    });\n  } catch (error) {\n    dispatch({\n      type: GET_ERRORS,\n      payload: error.response.data\n    });\n  }\n};","map":{"version":3,"names":["axios","GET_TASKS","CREATE_TASK","GET_TASK","DELETE_TASK","UPDATE_TASK","getTasks","dep_id","emp_id","id","dispatch","apiUrl","res","get","type","payload","data","createTask","task","post","getTask","deleteTask","window","confirm","delete","updateTask","updatedTask","put","headers","error","GET_ERRORS","response"],"sources":["C:/home/edilat/IDE/git-repositories/web-products/internship-web/live-sessions-internship-web/employee-management-frontend/src/actions/TaskActions.js"],"sourcesContent":["import axios from \"axios\";\r\nimport {\r\n  GET_TASKS,\r\n  CREATE_TASK,\r\n  GET_TASK,\r\n  DELETE_TASK,\r\n  UPDATE_TASK,\r\n} from \"./types\";\r\n\r\nexport const getTasks = (dep_id, emp_id, id) => async (dispatch) => {\r\n  const apiUrl = `http://localhost:8095/api/tasks/${dep_id}/${emp_id}`;\r\n\r\n  if (id) {\r\n    apiUrl += `/${id}`;\r\n  }\r\n\r\n  const res = await axios.get(apiUrl);\r\n  dispatch({\r\n    type: GET_TASKS,\r\n    payload: res.data,\r\n  });\r\n};\r\n\r\nexport const createTask = (task, dep_id, emp_id) => async (dispatch) => {\r\n  const res = await axios.post(\r\n    `http://localhost:8095/api/tasks/${dep_id}/${emp_id}`,\r\n    task\r\n  );\r\n  dispatch({\r\n    type: CREATE_TASK,\r\n    payload: res.data,\r\n  });\r\n};\r\n\r\nexport const getTask = (dep_id, emp_id, id) => async (dispatch) => {\r\n  const res = await axios.get(`http://localhost:8095/api/tasks/${dep_id}/${emp_id}/${id}`);\r\n  dispatch({\r\n    type: GET_TASK,\r\n    payload: res.data,\r\n  });\r\n};\r\n\r\n\r\nexport const deleteTask = (dep_id, emp_id, id) => async (dispatch) => {\r\n  if (window.confirm(\"Are you sure you want to delete this Task?\")) {\r\n    await axios.delete(`http://localhost:8095/api/tasks/${dep_id}/${emp_id}/${id}`);\r\n    dispatch({\r\n      type: DELETE_TASK,\r\n      payload: id,\r\n    });\r\n  }\r\n};\r\n\r\n\r\nexport const updateTask = (updatedTask, dep_id, emp_id, id) => async (dispatch) => {\r\n  try {\r\n    const res = await axios.put(\r\n      `http://localhost:8095/api/tasks/${dep_id}/${emp_id}/${id}`,\r\n      updatedTask,\r\n      {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      }\r\n    );\r\n\r\n    // Dispatch an action to handle the successful update\r\n    dispatch({\r\n      type: UPDATE_TASK, // Define the action type here\r\n      payload: res.data, // You may update the payload based on your needs\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: GET_ERRORS,\r\n      payload: error.response.data,\r\n    });\r\n  }\r\n};\r\n\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SACEC,SAAS,EACTC,WAAW,EACXC,QAAQ,EACRC,WAAW,EACXC,WAAW,QACN,SAAS;AAEhB,OAAO,MAAMC,QAAQ,GAAGA,CAACC,MAAM,EAAEC,MAAM,EAAEC,EAAE,KAAK,MAAOC,QAAQ,IAAK;EAClE,MAAMC,MAAM,GAAI,mCAAkCJ,MAAO,IAAGC,MAAO,EAAC;EAEpE,IAAIC,EAAE,EAAE;IACNE,MAAM,IAAK,IAAGF,EAAG,EAAC;EACpB;EAEA,MAAMG,GAAG,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAACF,MAAM,CAAC;EACnCD,QAAQ,CAAC;IACPI,IAAI,EAAEb,SAAS;IACfc,OAAO,EAAEH,GAAG,CAACI;EACf,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMC,UAAU,GAAGA,CAACC,IAAI,EAAEX,MAAM,EAAEC,MAAM,KAAK,MAAOE,QAAQ,IAAK;EACtE,MAAME,GAAG,GAAG,MAAMZ,KAAK,CAACmB,IAAI,CACzB,mCAAkCZ,MAAO,IAAGC,MAAO,EAAC,EACrDU,IACF,CAAC;EACDR,QAAQ,CAAC;IACPI,IAAI,EAAEZ,WAAW;IACjBa,OAAO,EAAEH,GAAG,CAACI;EACf,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMI,OAAO,GAAGA,CAACb,MAAM,EAAEC,MAAM,EAAEC,EAAE,KAAK,MAAOC,QAAQ,IAAK;EACjE,MAAME,GAAG,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAAE,mCAAkCN,MAAO,IAAGC,MAAO,IAAGC,EAAG,EAAC,CAAC;EACxFC,QAAQ,CAAC;IACPI,IAAI,EAAEX,QAAQ;IACdY,OAAO,EAAEH,GAAG,CAACI;EACf,CAAC,CAAC;AACJ,CAAC;AAGD,OAAO,MAAMK,UAAU,GAAGA,CAACd,MAAM,EAAEC,MAAM,EAAEC,EAAE,KAAK,MAAOC,QAAQ,IAAK;EACpE,IAAIY,MAAM,CAACC,OAAO,CAAC,4CAA4C,CAAC,EAAE;IAChE,MAAMvB,KAAK,CAACwB,MAAM,CAAE,mCAAkCjB,MAAO,IAAGC,MAAO,IAAGC,EAAG,EAAC,CAAC;IAC/EC,QAAQ,CAAC;MACPI,IAAI,EAAEV,WAAW;MACjBW,OAAO,EAAEN;IACX,CAAC,CAAC;EACJ;AACF,CAAC;AAGD,OAAO,MAAMgB,UAAU,GAAGA,CAACC,WAAW,EAAEnB,MAAM,EAAEC,MAAM,EAAEC,EAAE,KAAK,MAAOC,QAAQ,IAAK;EACjF,IAAI;IACF,MAAME,GAAG,GAAG,MAAMZ,KAAK,CAAC2B,GAAG,CACxB,mCAAkCpB,MAAO,IAAGC,MAAO,IAAGC,EAAG,EAAC,EAC3DiB,WAAW,EACX;MACEE,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CACF,CAAC;;IAED;IACAlB,QAAQ,CAAC;MACPI,IAAI,EAAET,WAAW;MAAE;MACnBU,OAAO,EAAEH,GAAG,CAACI,IAAI,CAAE;IACrB,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOa,KAAK,EAAE;IACdnB,QAAQ,CAAC;MACPI,IAAI,EAAEgB,UAAU;MAChBf,OAAO,EAAEc,KAAK,CAACE,QAAQ,CAACf;IAC1B,CAAC,CAAC;EACJ;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}